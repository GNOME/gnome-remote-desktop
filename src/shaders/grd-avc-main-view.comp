/*
 * Copyright (C) 2024 Pascal Nowack
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 */

#version 460
#extension GL_EXT_shader_explicit_arithmetic_types_int32 : require

layout (local_size_x = 16, local_size_y = 16) in;

layout (constant_id = 0) const uint32_t SOURCE_WIDTH = 256;
layout (constant_id = 1) const uint32_t SOURCE_HEIGHT = 256;

layout (constant_id = 2) const uint32_t TARGET_WIDTH = 256;
layout (constant_id = 3) const uint32_t TARGET_HEIGHT = 256;

layout (constant_id = 4) const uint32_t PERFORM_DMG_DETECTION = 0;
layout (constant_id = 5) const uint32_t STATE_BUFFER_STRIDE = 0;

layout (set = 0, binding = 0, r8) uniform writeonly image2D main_y_layer;
layout (set = 0, binding = 1, rg8) uniform writeonly image2D main_uv_layer;

layout (set = 1, binding = 0) buffer writeonly DamageBuffer
{
  uint32_t data[];
} needs_update;

layout (set = 1, binding = 1) buffer writeonly Dummy
{
  uint32_t data[];
} dummy;

layout (set = 2, binding = 0) uniform sampler2D src_new_sampler;
layout (set = 2, binding = 1) uniform sampler2D src_old_sampler;

float
rgb_to_y (int32_t r,
          int32_t g,
          int32_t b)
{
  return float ((54 * r + 183 * g + 18 * b) >> 8);
}

float
rgb_to_u (int32_t r,
          int32_t g,
          int32_t b)
{
  return float (((-29 * r - 99 * g + 128 * b) >> 8) + 128);
}

float
rgb_to_v (int32_t r,
          int32_t g,
          int32_t b)
{
  return float (((128 * r - 116 * g - 12 * b) >> 8) + 128);
}

void
main ()
{
  const uint32_t x_2x2 = gl_GlobalInvocationID.x;
  const uint32_t y_2x2 = gl_GlobalInvocationID.y;
  uint32_t x_1x1;
  uint32_t y_1x1;
  float y0, y1, y2, y3;
  int32_t r_a, g_a, b_a;
  uint32_t dmg_p0, dmg_p1, dmg_p2, dmg_p3;
  vec4 uv;

  if (x_2x2 >= TARGET_WIDTH >> 1 || y_2x2 >= TARGET_HEIGHT >> 1)
    return;

  x_1x1 = x_2x2 << 1;
  y_1x1 = y_2x2 << 1;

  y0 = y1 = y2 = y3 = 0.0f;
  r_a = g_a = b_a = 0;

  dmg_p0 = dmg_p1 = dmg_p2 = dmg_p3 = 0;

  if (x_1x1 < SOURCE_WIDTH && y_1x1 < SOURCE_HEIGHT)
    {
      vec4 bgrx_new;
      vec4 bgrx_old;
      int32_t b, g, r;

      bgrx_new = texture (src_new_sampler, ivec2 (x_1x1, y_1x1));
      bgrx_old = texture (src_old_sampler, ivec2 (x_1x1, y_1x1));

      if (bgrx_new.bgr != bgrx_old.bgr)
        dmg_p0 = 1;

      b_a = b = int32_t (bgrx_new.b * 255.0f);
      g_a = g = int32_t (bgrx_new.g * 255.0f);
      r_a = r = int32_t (bgrx_new.r * 255.0f);

      y0 = rgb_to_y (r, g, b);
    }

  if (x_1x1 + 1 < SOURCE_WIDTH && y_1x1 < SOURCE_HEIGHT)
    {
      vec4 bgrx_new;
      vec4 bgrx_old;
      int32_t b, g, r;

      bgrx_new = texture (src_new_sampler, ivec2 (x_1x1 + 1, y_1x1));
      bgrx_old = texture (src_old_sampler, ivec2 (x_1x1 + 1, y_1x1));

      if (bgrx_new.bgr != bgrx_old.bgr)
        dmg_p1 = 1;

      b_a += b = int32_t (bgrx_new.b * 255.0f);
      g_a += g = int32_t (bgrx_new.g * 255.0f);
      r_a += r = int32_t (bgrx_new.r * 255.0f);

      y1 = rgb_to_y (r, g, b);
    }

  if (x_1x1 < SOURCE_WIDTH && y_1x1 + 1 < SOURCE_HEIGHT)
    {
      vec4 bgrx_new;
      vec4 bgrx_old;
      int32_t b, g, r;

      bgrx_new = texture (src_new_sampler, ivec2 (x_1x1, y_1x1 + 1));
      bgrx_old = texture (src_old_sampler, ivec2 (x_1x1, y_1x1 + 1));

      if (bgrx_new.bgr != bgrx_old.bgr)
        dmg_p2 = 1;

      b_a += b = int32_t (bgrx_new.b * 255.0f);
      g_a += g = int32_t (bgrx_new.g * 255.0f);
      r_a += r = int32_t (bgrx_new.r * 255.0f);

      y2 = rgb_to_y (r, g, b);

      if (x_1x1 + 1 < SOURCE_WIDTH)
        {
          bgrx_new = texture (src_new_sampler, ivec2 (x_1x1 + 1, y_1x1 + 1));
          bgrx_old = texture (src_old_sampler, ivec2 (x_1x1 + 1, y_1x1 + 1));

          if (bgrx_new.bgr != bgrx_old.bgr)
            dmg_p3 = 1;

          b_a += b = int32_t (bgrx_new.b * 255.0f);
          g_a += g = int32_t (bgrx_new.g * 255.0f);
          r_a += r = int32_t (bgrx_new.r * 255.0f);

          y3 = rgb_to_y (r, g, b);
        }
    }

  if (PERFORM_DMG_DETECTION == 0 ||
      dmg_p0 != 0 || dmg_p1 != 0 || dmg_p2 != 0 || dmg_p3 != 0)
    {
      uint32_t x_64x64 = x_2x2 >> 5;
      uint32_t y_64x64 = y_2x2 >> 5;
      uint32_t target_pos;

      target_pos = y_64x64 * STATE_BUFFER_STRIDE + x_64x64;
      needs_update.data[target_pos] = 1;
    }

  imageStore (main_y_layer, ivec2 (x_1x1, y_1x1), vec4 (y0 / 255.0f));
  imageStore (main_y_layer, ivec2 (x_1x1 + 1, y_1x1), vec4 (y1 / 255.0f));
  imageStore (main_y_layer, ivec2 (x_1x1, y_1x1 + 1), vec4 (y2 / 255.0f));
  imageStore (main_y_layer, ivec2 (x_1x1 + 1, y_1x1 + 1), vec4 (y3 / 255.0f));

  b_a >>= 2;
  g_a >>= 2;
  r_a >>= 2;

  uv = vec4 (rgb_to_u (r_a, g_a, b_a) / 255.0f,
             rgb_to_v (r_a, g_a, b_a) / 255.0f,
             0,
             0);
  imageStore (main_uv_layer, ivec2 (x_2x2, y_2x2), uv);
}
